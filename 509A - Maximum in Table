#include<bits/stdc++.h>
#define lli long long int 
#define ll long long 
#define f(i, n) for(int i=0; i<n; i++)

using namespace std;

int power(int a, int b){
	int r=1;
	
	for(int i=1; i<=b; i++){
		r *= 2;
	}
	return r;
}
int isPrime(int a){
	if(a <= 1) return false;
	if(a == 2) return false;
	if(a%2 == 0) return false;
	
	int n = sqrt(a);
	for(int i=2; i<=n; i++){
		if(a%i == 0) return false;
	}
	
	return true;
}
void allPrime(int lenght, vector<int> v){
	
	bool b[lenght+1];
	for(int i=0; i<=lenght; i++){
		b[i] = true;
	}
	b[0] = false;
	b[1] = false;
	
	int n = sqrt(lenght);
	
	for(int i=2; i<= n; i++){
		if(b[i] == true){
		  for(int j = i*i; j<=lenght ; j+= i){
			 b[j] = false;
		  }
		}
	}
	
	for(int i=2; i<= lenght ; i++){
		if(b[i]){
			v.push_back(i);
			cout<<i <<" ";
		}
	}
	
}
void segmentedsieve(int n){
	int limit = floor(sqrt(n))+1;
	vector<int> prime;
	allPrime(limit, prime);
	
	int low = limit;
	int high = limit*2;
	
	while(low < n){
		
		if(high >= n) high = n;
		
		bool b[limit+1];
		memset(b, true, sizeof(b));
		
		for(int i=0; i < prime.size(); i++){
			int loLim = floor(low/prime[i])*prime[i];
			if(loLim < low)
				loLim  += prime[i];
			
			for(int j= loLim; j<high; j+= prime[i]){
				b[j-low] = false;
			}
		}
		
		for(int i=low; i<high; i++){
			if(b[i- low] == true){
				cout<<i<<" ";
			}
		}
		
		low = low + limit;
		high = high + limit;
	}
	
	
	
}
int gcd(int a, int b){
	if(b == 0) return a;
	else
		return gcd(b, a%b);
}
int lcm(int a, int b){
	
	if(a != 0|| b!= 0){
		return a*b / gcd(a, b);
	}
	return 0;
}



void test()
{
	int n;
	cin>>n;
	
	vector<vector<int>> a(n);
	
	
	for(int i=0; i<n ; i++){
		vector<int> b(n);
		a[i] = b;
	}
   for(int i=0; i<n; i++){
	   a[i][0] = a[0][i] = 1;
   }
   for(int i=1; i<n; i++){
	   for(int j=1; j<n; j++){
		   a[i][j] = a[i - 1][j] + a[i][j -1];
		   
	   }
	   
   }
   
   cout<<a[n-1][n-1]<<endl;
}

int main(){
	
	/*int t;
	cin>>t;
	
	while(t--){
		test();
	}*/
	
	test();
	return 0;

}





